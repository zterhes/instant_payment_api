version: '3.8'

services:
  # Databases
  payment-db:
    image: postgres:14-alpine
    container_name: payment-db
    environment:
      POSTGRES_DB: ${PAYMENT_DB_NAME}
      POSTGRES_USER: ${PAYMENT_DB_USERNAME}
      POSTGRES_PASSWORD: ${PAYMENT_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - payment_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "payment_user", "-d", "payment_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  notification-db:
    image: postgres:14-alpine
    container_name: notification-db
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
      POSTGRES_USER: ${NOTIFICATION_DB_USERNAME}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - notification_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "notification_user", "-d", "notification_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-db:
    image: postgres:14-alpine
    container_name: user-db
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "user_user", "-d", "user_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: bitnami/kafka:3.6
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL  # This line ensures the broker communication uses the INTERNAL listener
      - KAFKA_KRAFT_CLUSTER_ID=${KAFKA_KRAFT_CLUSTER_ID}
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 5s
      timeout: 10s
      retries: 10


  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    depends_on:
      - kafka

  # Spring Boot Applications
  payment-api:
    build:
      context: .
      dockerfile: apps/payment-api/Dockerfile
    container_name: payment-api
    environment:
      PAYMENT_DB_URL: ${PAYMENT_DB_URL}
      PAYMENT_DB_USERNAME: ${PAYMENT_DB_USERNAME}
      PAYMENT_DB_PASSWORD: ${PAYMENT_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8081:8080"
    depends_on:
      payment-db:
        condition: service_healthy
      kafka:
        condition: service_healthy

  notification-api:
    build:
      context: .
      dockerfile: apps/notification-api/Dockerfile
    container_name: notification-api
    environment:
      NOTIFICATION_DB_URL: ${NOTIFICATION_DB_URL}
      NOTIFICATION_DB_USERNAME: ${NOTIFICATION_DB_USERNAME}
      NOTIFICATION_DB_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
    ports:
      - "8082:8080"
    depends_on:
      notification-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      payment-api:
        condition: service_started

  user-api:
    build:
      context: .
      dockerfile: apps/user-api/Dockerfile
    container_name: user-api
    environment:
      USER_DB_URL: ${USER_DB_URL}
      USER_DB_USERNAME: ${USER_DB_USERNAME}
      USER_DB_PASSWORD: ${USER_DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    ports:
      - "8083:8080"
    depends_on:
      user-db:
        condition: service_healthy

volumes:
  payment_data:
  notification_data:
  user_data:
  kafka_data: