version: '3.8'

services:
  # Databases
  payment-db:
    image: postgres:14-alpine
    container_name: payment-db
    environment:
      POSTGRES_DB: ${PAYMENT_DB_NAME}
      POSTGRES_USER: ${PAYMENT_DB_USERNAME}
      POSTGRES_PASSWORD: ${PAYMENT_DB_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - payment_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "payment_user", "-d", "payment_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - payment-db-network

  notification-db:
    image: postgres:14-alpine
    container_name: notification-db
    environment:
      POSTGRES_DB: ${NOTIFICATION_DB_NAME}
      POSTGRES_USER: ${NOTIFICATION_DB_USERNAME}
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD}
    ports:
      - "5433:5432"
    volumes:
      - notification_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "notification_user", "-d", "notification_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - notification-db-network

  user-db:
    image: postgres:14-alpine
    container_name: user-db
    environment:
      POSTGRES_DB: ${USER_DB_NAME}
      POSTGRES_USER: ${USER_DB_USERNAME}
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD}
    ports:
      - "5434:5432"
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "user_user", "-d", "user_db" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - user-db-network

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
      # Enable auto topic creation
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # Create notification topic by default
      KAFKA_CREATE_TOPICS: 'notification:1:1'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - kafka-network
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # Spring Boot Applications
  payment-api:
    build:
      context: .
      dockerfile: apps/payment-api/Dockerfile
    container_name: payment-api
    environment:
      PAYMENT_DB_URL: ${PAYMENT_DB_URL}
      PAYMENT_DB_USERNAME: ${PAYMENT_DB_USERNAME}
      PAYMENT_DB_PASSWORD: ${PAYMENT_DB_PASSWORD}
      USER_API_URL: ${USER_API_URL}
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    ports:
      - "8081:8080"
    depends_on:
      payment-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - payment-user-network
      - payment-db-network
      - kafka-network

  notification-api:
    build:
      context: .
      dockerfile: apps/notification-api/Dockerfile
    container_name: notification-api
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      USER_API_URL: ${USER_API_URL}
    ports:
      - "8082:8080"
    depends_on:
      notification-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      payment-api:
        condition: service_started
    networks:
      - kafka-network

  user-api:
    build:
      context: .
      dockerfile: apps/user-api/Dockerfile
    container_name: user-api
    environment:
      USER_DB_URL: ${USER_DB_URL}
      USER_DB_USERNAME: ${USER_DB_USERNAME}
      USER_DB_PASSWORD: ${USER_DB_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION}
    ports:
      - "8083:8080"
    depends_on:
      user-db:
        condition: service_healthy
    networks:
      - payment-user-network
      - user-db-network

volumes:
  payment_data:
  user_data:
  kafka_data:

networks:
  payment-user-network:
    driver: bridge
  kafka-network:
    driver: bridge
  payment-db-network:
    driver: bridge
  user-db-network:
    driver: bridge